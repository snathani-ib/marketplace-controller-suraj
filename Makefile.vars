PROJECT_ROOT    := github.com/Infoblox-CTO/cdc.flow.api.service/v2
BUILD_PATH      := bin

# configuration for image names
GIT_COMMIT             := $(shell git describe --tags --dirty=-unreleased --always)
IMAGE_VERSION          := $(GIT_COMMIT)
IMAGE_REGISTRY         ?= infobloxcto
IMAGE_PREFIX           ?= cdc.flow

# configuration for the protobuf gentool
SRCROOT_ON_HOST		:= $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))
SRCROOT_IN_CONTAINER	:= /go/src/$(PROJECT_ROOT)
DOCKER_ENVS             += -e XDG_CACHE_HOME=/tmp/.cache
DOCKER_RUNNER    	:= docker run -u `id -u`:`id -g` --rm
DOCKER_RUNNER		+= -v $(SRCROOT_ON_HOST):$(SRCROOT_IN_CONTAINER)
DOCKER_RUNNER          += $(DOCKER_ENVS)
DOCKER_GENERATOR	:= infoblox/atlas-gentool:v23.0
GENERATOR		:= $(DOCKER_RUNNER) $(DOCKER_GENERATOR)

BUILDTOOL_IMAGE 	:= golang:1.19.5-alpine
BUILD_RUNNER 		:= docker run -u `id -u`:`id -g` --rm
BUILD_RUNNER 		+= -v $(SRCROOT_ON_HOST):$(SRCROOT_IN_CONTAINER)
BUILD_RUNNER 		+= -w $(SRCROOT_IN_CONTAINER)
BUILD_RUNNER 		+= $(DOCKER_ENVS)
GO_BUILDER 		:= $(BUILD_RUNNER) --net="host" -e CGO_ENABLED=0 $(BUILDTOOL_IMAGE)

# configuration for the database
DATABASE_HOST	?= 127.0.0.1
DATABASE_PORT   ?= 6432
DATABASE_USERNAME	?= postgres
DATABASE_PASSWORD	?= postgres
DATABASE_NAME           = cdc.flow
DATABASE_URL            ?= postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?sslmode=disable

MIGRATETOOL_IMAGE           = infoblox/migrate:v2.0.0-ib
MIGRATION_PATH				= db/migrations
MIGRATION_PATH_IN_CONTAINER = $(SRCROOT_IN_CONTAINER)/$(MIGRATION_PATH)

# configuration for building on host machine
GO_CACHE		:= -pkgdir $(BUILD_PATH)/go-cache
GO_BUILD_FLAGS		?= $(GO_CACHE) -i -v
GO_BUILD		:= $(GO_BUILDER) go build $(GO_BUILD_FLAGS)
GO_TEST_FLAGS		?= -v -cover
GO_PACKAGES		:= ./common/... ./pkg/... ./cmd/... ./tests/testapi/...

PROTOBUF_ARGS =  -I=$(PROJECT_ROOT)/vendor
PROTOBUF_ARGS += --go_out="plugins=grpc:."
PROTOBUF_ARGS += --grpc-gateway_out="allow_delete_body=true,logtostderr=true:."
PROTOBUF_ARGS += --swagger_out="allow_delete_body=true,atlas_patch=true,allow_merge=true,merge_file_name=$(PROJECT_ROOT)/pkg/pb/service:."
PROTOBUF_ARGS += --atlas-validate_out="."
PROTOBUF_ARGS += --preprocess_out="."
PROTOBUF_ARGS += --validate_out="lang=go:."
PROTOBUF_ARGS += --atlas-query-validate_out="."

CONFIG_PROTOBUF_ARGS += --go_out="plugins=grpc:."
CONFIG_PROTOBUF_ARGS += --grpc-gateway_out="allow_delete_body=true,logtostderr=true:."

NAMESPACE 	?= cdc-flow
APP_NAME 	?= cdc-flow

AWS_ACCESS_KEY_ID     ?= `aws configure get aws_access_key_id`
AWS_SECRET_ACCESS_KEY ?= `aws configure get aws_secret_access_key`
AWS_REGION            ?= `aws configure get region`
AWS_SESSION_TOKEN     ?= `aws configure get aws_session_token`


HELM_DOCKER_LOCAL_ENV :=
CHART_NAME            := cdc-flow
CHART_VERSION         ?= $(GIT_COMMIT)
CHART_FILE            := $(CHART_NAME)-$(CHART_VERSION).tgz
HELM_DOCKER_ENV       := -e AWS_REGION=$(AWS_REGION) -e AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) -e AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY) -e AWS_SESSION_TOKEN=$(AWS_SESSION_TOKEN)

ifeq ($(USING_LOCAL_KIND),1)
HELM_DOCKER_ENV       = -e NOAWS=nope
CHART_VERSION         = $(shell cat repo/cdc-flow/Chart.yaml | grep version | cut -d' ' -f2)-$(GIT_COMMIT)
CHART_FILE            = $(CHART_NAME)-$(CHART_VERSION).tgz
endif

#configuration for helm
HELM_DOCKER_RUNNER    := docker run --rm -v $(SRCROOT_ON_HOST):$(SRCROOT_IN_CONTAINER)
HELM_IMAGE            := infoblox/helm:3.2.4-5b243a2
HELM                  := $(HELM_DOCKER_RUNNER) $(HELM_DOCKER_ENV) -w $(SRCROOT_IN_CONTAINER) $(HELM_IMAGE)
ENV                   ?= env-4
LIFECYCLE             ?= dev
HELM_DC_REPO          ?= deployment-configurations
HELM_REPO_PATH        ?= ../$(HELM_DC_REPO)

# ----------------------
# APPs
# ----------------------

API_APP		:= api
API_BINARY 	:= $(BUILD_PATH)/server
API_PATH	:= cmd/server
API_IMAGE_NAME	:= $(IMAGE_PREFIX).$(API_APP)
API_IMAGE_FULL	:= $(IMAGE_REGISTRY)/$(API_IMAGE_NAME)
API_DOCKERFILE	:= $(API_PATH)/Dockerfile

ITEST_DOCKERFILE := tests/Dockerfile
ITEST_IMAGE_NAME := $(IMAGE_PREFIX).itest
ITEST_IMAGE_FULL := $(IMAGE_REGISTRY)/$(ITEST_IMAGE_NAME)
ITEST_RUNNER := $(BUILD_RUNNER) --net="host" -e CGO_ENABLED=0
ITEST_RUNNER += -e PGHOST=$(DATABASE_HOST) -e PGPORT=$(DATABASE_PORT)
ITEST_RUNNER += -e PGUSER=$(DATABASE_USERNAME) -e PGPASSWORD=$(DATABASE_PASSWORD)
ITEST_RUNNER += -e PGDATABASE=$(DATABASE_NAME)
ITEST_RESOURCE :=

SYNC_BINARY 	:= $(BUILD_PATH)/hostappsync
SYNC_PATH	:= cmd/hostapp-sync

MIGRATE_BIN_PATH := migratebin/
MIGRATE_BINARY := db/migrations/encrypt

MOCKAPI_APP := mockapi
MOCKAPI_BINARY := $(BUILD_PATH)/$(MOCKAPI_APP)
MOCKAPI_PATH := cmd/$(MOCKAPI_APP)
MOCKAPI_DOCKERFILE := $(MOCKAPI_PATH)/Dockerfile
MOCKAPI_IMAGE_NAME := $(IMAGE_PREFIX).$(MOCKAPI_APP)
MOCKAPI_IMAGE_FULL := $(IMAGE_REGISTRY)/$(MOCKAPI_IMAGE_NAME)